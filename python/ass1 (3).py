# -*- coding: utf-8 -*-
"""ass1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C-_ER1EnjzY_3M0hgwS-QOngYVuUUPLm
"""

#1.Write a python program to sum of the first n positive integers.
n = int(input("Enter any integer value:"))
sum = (n*(n+1)/2)
print(sum)

#2.Write a Python program to count occurrences of a substring in a string.
a = "hello how are you? are you fine"
a.count("are")

#3.Write a Python program to count the occurrences of each word in a givensentence.
a = "hello how are you? are you fine"
b=(input("enter the word to count occurreces:"))
ans = b
if ans == b:
  print(a.count(b))
else:
  print("invalid input")

#4.Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string
a = (input("enter the first string:"))
b = (input("enter the second string:"))
a_new = b[0:2] + a[2:]
b_new = a[0:2] + b[2:]
ans = a_new + " " + b_new
print(ans)

#5.Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead If the string
#length of the given string is less than 3, leave it unchanged.
a = (input("enter the first string:"))
if len(a) > 3 and not a.endswith('ing'):
  a_new = a[0:3] + "ing"
elif a.endswith('ing'):
  a_new = a[0:len(a)-3] + "ly"
else:
  a_new = a
print(a_new)

#6.Write a Python program to find the first appearance of the substring 'not' and'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor'
#substring with 'good'. Return the resulting string.
a = (input("enter the first string:"))
b=a.find('not')
c=a.find('poor')
if b != -1 and c != -1 and b < c:
    print(a[:b] + 'good' + a[c + 4:])
    print (a)

#7.Program to find Greatest Common Divisor of two numbers. For example, the GCD of 20 and 28 is 4 and the GCD of 98 and 56 is 14.
import math
a = int(input("enter the first number:"))
b = int(input("enter the second number:"))
print(math.gcd(a,b))

#8.Write a Python program to check whether a list contains a sublist.
def is_sublist(main_list, sub_list):
    n, m = len(main_list), len(sub_list)

    if m == 0:
        return True  # Empty sublist is always present

    for i in range(n - m + 1):
        if main_list[i:i + m] == sub_list:
            return True
    return False

# Example usage
main_list = [1, 2, 3, 4, 5]
sub_list = [3, 4]

if is_sublist(main_list, sub_list):
    print("Sublist is present in the list.")
else:
    print("Sublist is not present in the list.")

#9.Write a Python program to find the second smallest number in a list.
a = input("Enter numbers separated by spaces: ")
list1 = list(map(int, a.split()))
print("You entered the list:", list1)

if len(list1) < 2:
  print("List should have two values.")
b = list(set(list1))
if len(b) < 2:
  print("All elements are the same. No second smallest number.")
b.sort()
print(b[1])

#10.Write a Python program to get unique values from a list.
a = input("Enter numbers separated by spaces: ")
list1 = list(map(int, a.split()))
print("You entered the list:", list1)
b = list(set(list1))
print(b)

#11.Write a Python program to unzip a list of tuples into individual lists.
a = [('Ritu', 'Salunke'), ('Devyani', 'Salunke'), ('Harsh', 'Salunke')]
l1 = []
l2 = []
for a, b in a:
    l1.append(a)
    l2.append(b)
print(l1)
print(l2)

#12.Write a Python program to convert a list of tuples into a dictionary
a = [('Ritu', 'Salunke'), ('Devyani', 'Salunke'), ('Harsh', 'Salunke')]
b = dict(a)
print("Tuples into Dictionary:", b)

#13.Write a Python program to sort a dictionary (ascending /descending) by value.
name = {'ritu': 'salunke', 'devyani': 'salekar', 'anjali': 'pawar', 'bijal': 'rathod'}
b = dict(sorted(name.items(), key=lambda item: item[1]))
c = dict(sorted(name.items(), key=lambda item: item[1], reverse=True))
print("asc",b)
print("asc",c)

#14.Write a Python program to find the highest 3 values in a dictionary.
a = {'English': 60, 'Maths': 33, 'Hindi': 75, 'Gujarati': 70, 'Science': 80}
b = sorted(a.values(), reverse=True)[:3]
print("highest values:", b)

#15.Given a number n, write a python program to make and print the list of Fibonacci
#series up to n. Input : n=7 Hint : first 7 numbers in the series Expected output :
#First few Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13
a = int(input("Enter the number: "))
f = [0, 1]  # Start two Fibonacci numbers
for i in range(2, a):
  f.append(f[i-1] + f[i-2])
  print(f[:a]) #only return a number

#16.Counting the frequencies in a list using a dictionary in Python. Input : [1, 1, 1, 5, 5, 3, 1, 3, 3, 1,4, 4, 4, 2, 2, 2, 2]
#Expected output : 1 : 5 , 2 : 4 , 3 : 3 , 4 : 3 , 5 : 2
numbers = [1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]
n = {}

for num in numbers:
    if num in n:
        n[num] += 1
    else:
        n[num] = 1

for key in sorted(n.keys()):
    print(f"{key} : {n[key]}", end=" , ")

#17.Write a python program using function to find the sum of odd series and even series
#Odd series: 12/ 1! +32/ 3! + 52/ 5!+……n
#Even series: 22/ 2! + 42/ 4! + 62/ 6!+……n
import math
def odd_series_sum(n):
    sum_odd = 0
    for i in range(1, 2*n, 2):  # Generate n odd numbers: 1, 3, 5,...
        term = (i ** 2) / math.factorial(i)
        sum_odd += term
    return sum_odd

def even_series_sum(n):
    sum_even = 0
    for i in range(2, 2*n + 1, 2):  # Generate n even numbers: 2, 4, 6,...
        term = (i ** 2) / math.factorial(i)
        sum_even += term
    return sum_even

# Input number of terms
n = int(input("Enter number of terms: "))
print(f"\nSum of Odd Series (first {n} terms): {odd_series_sum(n):.4f}")
print(f"Sum of Even Series (first {n} terms): {even_series_sum(n):.4f}")

#18. Python Program to Find Factorial of Number Using Recursion
a = int(input("Enter the number: "))
def factorial(a):
    if a == 0 or a == 1:
        return 1
    else:
        return a * factorial(a - 1)
print(factorial(a))

#19.Write a Python function that takes a list and returns a new list with unique elements of the first list.
a = input("Enter numbers separated by spaces: ")
list1 = list(map(int, a.split()))
print("You entered the list:", list1)
b = list(set(list1))
print(b)

#20.Mini project :
#Problem Statement : Password Generator
#Make a program to generate a strong password using the input given by theuser. To generate a password, randomly take some words from the user input
#and then include numbers, special characters and capital letters to generate the password. Also, keep a check that password length is more than 8 characters.
#Note: Include Exception handling wherever required. Also, make a ‘User’ class and store the details like user id, name and password of each user as a tuple

import random
import string
class User:
    def _init_(self, user_id, name, password):
        self.details = (user_id, name, password)
    def display_details(self):
        print(f"\nUser Details:\nUser ID: {self.details[0]}\nName: {self.details[1]}\nPassword: {self.details[2]}")

def generate_password(user_input):
    try:
        words = user_input.split()

        if len(words) < 2:
            raise ValueError("Please enter at least two words for better password strength.")
        # Select random words
        word_part = ''.join(random.choice(words).capitalize() for _ in range(2))
        # Add random digits and symbols
        digits = ''.join(random.choices(string.digits, k=2))
        symbols = ''.join(random.choices("!@#$%^&*()", k=2))
        # Combine and shuffle
        raw_password = list(word_part + digits + symbols)
        random.shuffle(raw_password)
        password = ''.join(raw_password)
        # Ensure password length > 8
        if len(password) < 8:
            extra_chars = ''.join(random.choices(string.ascii_letters + string.digits + "!@#$%", k=(8 - len(password))))
            password += extra_chars
        return password
    except Exception as e:
        print("Error generating password:", e)
        return None

# Main program

try:
    user_id = input("Enter User ID: ")
    name = input("Enter your name: ")
    user_input = input("Enter a few words about yourself: ")

    password = generate_password(user_input)

    if password:
        user = User(user_id, name, password)
        user.display_details()
    else:
        print("Failed to create password.")

except Exception as e:
    print("Something went wrong:", e)