# -*- coding: utf-8 -*-
"""module_5_ass.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U12Ly1b4pUV6r0mbi1YNs5UfHQpKJZh7
"""

import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.preprocessing import OneHotEncoder, LabelEncoder,PolynomialFeatures
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.metrics import mean_squared_error, r2_score

from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from xgboost import XGBRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.svm import SVR

data=pd.read_excel("/content/car_data.xlsx")
data.head()

data.describe()

data.info()

data.shape

data.dtypes

data.columns

#plt.figure(figsize=(8, 10))
sns.histplot(data['Engine HP'], bins=60, kde=True)
plt.title('Distribution of Engine HP')
plt.xlabel('Engine HP')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(5, 5))
sns.boxplot(data=data, x='Vehicle Size', y='MSRP')
plt.title('Vehicle Size vs. MSRP')
plt.xlabel('Vehicle Size')
plt.ylabel('MSRP')
plt.show()

plt.figure(figsize=(10, 5))
top_makes = data['Make'].value_counts().head(10)
sns.barplot(x=top_makes.index, y=top_makes.values)
plt.title('Top 10 Car Makes')
plt.xlabel('Make')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8, 5))
sns.scatterplot(data=data, x='Engine HP', y='MSRP', alpha=0.5)
plt.title('Engine HP vs. MSRP')
plt.xlabel('Engine HP')
plt.ylabel('MSRP')
plt.show()

sns.pairplot(data, vars=['Engine HP', 'Engine Cylinders', 'highway MPG', 'city mpg', 'MSRP'], palette='Set2')
plt.show()

plt.figure(figsize=(10, 6))
numeric_cols = data.select_dtypes(include=['float64', 'int64'])
corr_matrix = numeric_cols.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

df=data.drop_duplicates(inplace=True)
data

data = data.dropna()
data

lcoder= LabelEncoder()
data['Make_label'] = lcoder.fit_transform(data['Make'])
data['Engine Fuel Type_label'] = lcoder.fit_transform(data['Engine Fuel Type'])
data['Transmission Type_label'] = lcoder.fit_transform(data['Transmission Type'])
data['Driven_Wheels_label'] = lcoder.fit_transform(data['Driven_Wheels'])
data['Market Category_label'] = lcoder.fit_transform(data['Market Category'])
data['Vehicle Size_label'] = lcoder.fit_transform(data['Vehicle Size'])
data['Vehicle Style_label'] = lcoder.fit_transform(data['Vehicle Style'])
data['Model_label'] = lcoder.fit_transform(data['Model'])

data['Model'] = data['Model'].astype(str)

data

X = data.drop(['Make','Model','Engine Fuel Type','Transmission Type','Driven_Wheels','Market Category','Vehicle Size','Vehicle Style','MSRP'],axis=1)
Y = data['MSRP']

X

Y

X.shape

Y.shape

scaler_s = StandardScaler()
scaler_m = MinMaxScaler()
X_scaled_s = scaler_s.fit_transform(X)
X_scaled_m = scaler_m.fit_transform(X)

Xtrain, Xtest, Ytrian, Ytest = train_test_split(X,Y,test_size=0.2)

liner = LinearRegression()
liner_model = liner.fit(Xtrain,Ytrian)

def result(model):
  Y_pre = model.predict(Xtest)
  mse = mean_squared_error(Ytest,Y_pre)
  r2 = r2_score(Ytest, Y_pre)
  return mse,r2

models = [liner_model]
for i in models:
  mse, r2 = result(i)
  print("\tmodel: ",i)
  print("MSE: ",mse)
  print("R2: ",r2)

ridge = Ridge(alpha=1.0)
ridge_model = ridge.fit(Xtrain, Ytrian)

lasso = Lasso(alpha=0.1)
lasso_model= lasso.fit(Xtrain, Ytrian)

degree = 2
poly_model = make_pipeline(PolynomialFeatures(degree), LinearRegression())
poly_model.fit(Xtrain, Ytrian)

DecisionTree = DecisionTreeRegressor()
DT_model = DecisionTree.fit(Xtrain,Ytrian)

RandomForest = RandomForestRegressor()
RF_model = RandomForest.fit(Xtrain,Ytrian)

Gradient_Boosting =  GradientBoostingRegressor()
GB_model = Gradient_Boosting.fit(Xtrain,Ytrian)

AdaBoost = AdaBoostRegressor()
AD_model = AdaBoost.fit(Xtrain,Ytrian)

SVR = SVR()
SVR_model = SVR.fit(Xtrain,Ytrian)

KNN = KNeighborsRegressor()
Knn_model = KNN.fit(Xtrain,Ytrian)

models = [ridge_model, lasso_model, poly_model, DT_model, RF_model, GB_model, AD_model, SVR_model, Knn_model]
for i in models:
  mse, r2 = result(i)
  print("\tmodel: ",i)
  print("MSE: ",mse)
  print("R2: ",r2)

